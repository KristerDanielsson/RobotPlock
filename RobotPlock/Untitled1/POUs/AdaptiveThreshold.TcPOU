<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="AdaptiveThreshold" Id="{308059fc-6dc4-4c8b-80b8-f58500610c53}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK AdaptiveThreshold

VAR_INPUT
		// Camera
	fbCamera			:	REFERENCE TO FB_VN_SimpleCameraControl;
	eState				:	REFERENCE TO ETcVnCameraState;
END_VAR

VAR
	// Images
	ipImageIn			:	ITcVnImage;
	ipImageGrey		:	ITcVnImage;
	ipImageAdaptiveThreshold:	ITcVnImage;
	ipImageInDisp		:	ITcVnDisplayableImage;


		// Bilateral Filter
	ipImageFiltered		:	ITcVnImage;
	nBilateral_Diameter		:	DINT	:=	7;
	fBilateral_SigmaColor	:	LREAL	:=	20;
	fBilateral_SigmaSpace	:	LREAL	:=	100;
	
	
	ipImageAdaptiveThresholdDisp:	ITcVnDisplayableImage;
	
	// Contours
	ipContours		:	ITcVnContainer;		
	ipContour			:	ITcVnContainer;	
	ipIterator			:	ITcVnForwardIterator;
	ipIteratorFilteredList: ITcVnForwardIterator;
	ipContoursFiltered 		: ITcVnContainer;
	ipContourReference	:	ITcVnContainer;
	ipContourCheck		:	ITcVnContainer;
	ipContourPicked		:	ITcVnContainer;
	fBestDissimilarity	:	LREAL;
	fDissimilarity		:	LREAL;
	
	// Parameters Blob
	fThreshold			:	REAL := 170;
	fMinArea			:	REAL := 300;
	fMaxArea			:   LREAL :=1000;
	fMaxDissimilarity	:	LREAL := 0.01;
	eComparisonMethod	:	ETcVnContoursMatchComparisonMethod := TCVN_CMCM_CONTOURS_MATCH_I3;
	eThresholdType: ETcVnThresholdType;
	
	// Drawing
	aColorGreen			:	TcVnVector4_LREAL := [0, 175, 0];
	aColorBlue			:	TcVnVector4_LREAL := [0, 0, 255];
	aColorRed			:	TcVnVector4_LREAL := [255, 0, 0];
	aColorRes			:	TcVnVector4_LREAL;
	sContourNumberText				:	STRING(255);
	sTextReference		:	STRING(255) := 'Reference contour';
	sTextCheck			:	STRING(255) := 'Check dissimilarity';
	
		

		
	// Miscellaneous
	bDarkBackground		:	BOOL;
	nContours			:	ULINT;
	nCounter			:	UINT := 0;
	aPixelValue			:	TcVnVector4_LREAL;
	stBoundingRectangle	:	TcVnRectangle_UDINT;
	stParams			:	TcVnParamsBlobDetection;
	hr 					:	HRESULT;	



	
	aPosition: TcVnPoint2_DINT;
	aMaxValue: TcVnVector4_LREAL;

	
	//FindContoursExp
		eRetrievalMode: ETcVnContourRetrievalMode;
	eApproximationMethod: ETcVnContourApproximationMethod;
	aOffset: TcVnPoint;
	
	//Sorting list
	fArea: LREAL;
	
	// Watchdog
	hrWD 					:	HRESULT;
	tWDStop					:	DINT := 80000;	(* Stop time in us *)
	tRest 					:	DINT;
	nFunctionsMonitored		:	ULINT;
	nFractionProcessed 		:	UDINT;	
	tDuration 				:	DINT;
	

	Index: ULINT;
	ipSingleContour: INT;
	nContoursFiltered: ULINT;
	aCenter: TcVnPoint2_LREAL;
	fArea2: LREAL;
	reaknare: INT;
	
	
	//Create Structuring element for the Closing operation
ipStructuringElement: ITcVnImage;
eShape: ETcVnStructuringElementShape :=TCVN_SES_RECTANGLE;
	
	
	fAreaPicked: LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

eState := fbCamera.GetState();

CASE eState OF

TCVN_CS_INITIAL, TCVN_CS_INITIALIZING, TCVN_CS_INITIALIZED, TCVN_CS_OPENING, TCVN_CS_OPENED, TCVN_CS_STARTACQUISITION:
	hr := fbCamera.StartAcquisition();

TCVN_CS_ACQUIRING:
	hr := fbCamera.GetCurrentImage(ipImageIn);	
	


	IF SUCCEEDED(hr) AND ipImageIn <> 0 THEN
		
		// Prepare result image
		hr := F_VN_ConvertColorSpace(ipImageIn, ipImageGrey, TCVN_CST_RGB_TO_GRAY, hr);
		//F_VN_MaxPixelValue(ipImageIn,aMaxValue,aPosition,hr);
		//F_VN_MinPixelValue(ipImageIn,aMaxValue,aPosition,hr);
		//hr:=F_VN_NormalizeImage(ipImageIn,ipImageIn,hr);




		
//Start watchdog to limit the time allowed for the functions below. 
		hrWD := F_VN_StartRelWatchdog(tWDStop, hr);
		
		
//		//Filter image smooth.
//			hr := F_VN_GaussianFilterExp(
//			ipSrcImage      :=  ipImageIn,
//			ipDestImage     :=  ipImageFiltered,
//			nFilterWidth    :=  3,
//			nFilterHeight   :=  3,
//			fSigmaX         :=  5,
//			fSigmaY         :=  5,
//			eBorderType     :=  TCVN_BIM_DEFAULT,
//			hrPrev          :=  hr
//			);
			
//			hr := F_VN_BilateralFilter(
//						ipSrcImage      :=  ipImageIn,
//						ipDestImage     :=  ipImageFiltered,
//						nDiameter       :=  nBilateral_Diameter,//dDiameter set to 0 for automatic calculation depending on fSigmaSpace
//						fSigmaColor     :=  fBilateral_SigmaColor,
//						fSigmaSpace     :=  fBilateral_SigmaSpace,
//						hrPrev          :=  hr);

			//	hr := F_VN_CopyIntoDisplayableImage(ipImageFiltered, ipImageFilteredDisp, hr);			
						
	
	hr := F_VN_AdaptiveThresholdExp(
    ipSrcImage      :=  ipImageGrey,
    ipDestImage     :=  ipImageAdaptiveThreshold, 
    fMaxValue       :=  255, // max value of 8-bit image: (2^8)-1=255
    eAdaptiveMethod :=  TCVN_ATM_MEAN,
    eThresholdType  :=  TCVN_TT_BINARY_INV, //TCVN_TT_BINARY_INV,
    nBlockSize      :=  5,
    fConstant       :=  10,
    hrPrev          :=  hr
);

		hr := F_VN_CopyIntoDisplayableImage(ipImageAdaptiveThreshold, ipImageAdaptiveThresholdDisp, hr);


		hr:= F_VN_CreateStructuringElement(ipStructuringElement,eShape, 3, 3, hr);	
	
		//	hr:= F_VN_MorphologicalOperator(ipImageAdaptiveThreshold, ipImageAdaptiveThreshold, TCVN_MO_EROSION,ipStructuringElement, hr);
//			hr:= F_VN_MorphologicalOperator(ipImageAdaptiveThreshold, ipImageAdaptiveThreshold, TCVN_MO_CLOSING,ipStructuringElement, hr);
		//	hr:= F_VN_MorphologicalOperator(ipImageAdaptiveThreshold, ipImageAdaptiveThreshold, TCVN_MO_DILATION,ipStructuringElement, hr);



		hr:=F_VN_FindContoursExp(ipImageAdaptiveThreshold,ipContours,eRetrievalMode,eApproximationMethod,aOffset,hr);

		hr := F_VN_GetNumberOfElements(ipContours, nContours, hr);

		
		
//		//Blob detection
//		stParams.bFilterByArea:= TRUE;
//		stParams.fMinArea:=fMinArea;
//		stParams.fMaxArea:=fMaxArea;
//		stParams.bFilterByCircularity:=FALSE;
//		//stParams.fMaxCircularity:=0.9;
//		stParams.fMinThreshold:=150;
		stParams.eThresholdType:= eThresholdType;
		
//		hr := F_VN_DetectBlobs(ipImageIn, ipContours, stParams, hr);


		
	//Stop watchdog to limit the time allowed for the functions above. 
hrWD := F_VN_StopWatchdog(hrWD, nFunctionsMonitored => nFunctionsMonitored, nFractionProcessed => nFractionProcessed, tRest => tRest);


		//Testkod för att filtrera ut bara vissa konturer 
			
			//Skapa ny filtrerad lista av konturer
			hr:= F_VN_CreateContainer(ipContoursFiltered, ContainerType_Vector_Vector_TcVnPoint2_DINT,0, hr);  
			hr:= F_VN_ReserveContainerMemory(ipContoursFiltered, 100, hr);  //Only for performance reasons		
		
			hr := F_VN_GetForwardIterator(ipContours, ipIterator, hr);
			hr := F_VN_GetForwardIterator(ipContoursFiltered, ipIteratorFilteredList, hr);


			
					
			//Loop through every contour and filter it into a new list
		WHILE SUCCEEDED(hr) AND_THEN ipIterator.CheckIfEnd() <> S_OK DO

			hr:= F_VN_GetContainer(ipIterator, ipContour, hr);
					hr:= F_VN_ContourArea(ipContour, fArea, hr);
					
				IF fArea > 300  AND fArea < 1400 THEN
								hr:=F_VN_InsertIntoContainer_ITcVnContainer(ipContour,ipContoursFiltered,Index, hr);

								IF index= 2 THEN
										hr:= F_VN_ContourArea(ipContour, fArea2, hr);
								END_IF

								Index:=Index+1;		
								
								hr:= F_VN_ContourCenterOfMass(ipContour, aCenter, hr);
								sContourNumberText:= ULINT_TO_STRING(index);						
			hr:= F_VN_PutText(sContourNumberText, ipImageIn, LREAL_TO_UDINT(aCenter[0])+10,LREAL_TO_UDINT(aCenter[1]), ETcVnFontType.TCVN_FT_HERSHEY_PLAIN, 2, aColorGreen, hr);					
				END_IF
		
			hr:= F_VN_IncrementIterator(ipIterator, hr);
			
		END_WHILE

				hr := F_VN_GetNumberOfElements(ipContoursFiltered, nContoursFiltered, hr);
	
			//Get information about a specific contour			
				IF nContoursFiltered > 0 THEN
						hr := F_VN_GetAt_ITcVnContainer(ipContours, ipContourPicked, 39, hr);
						hr:= F_VN_ContourArea(ipContourPicked, fAreaPicked, hr);
				END_IF
			



		
					// Select one of the found contours as reference for matching
			hr := F_VN_GetAt_ITcVnContainer(ipContours, ipContourReference, nCounter MOD nContours, hr);

			// Draw selected contour and text
						reaknare:=(reaknare +1)MOD 1000 ;
						sTextReference:= INT_TO_STRING(reaknare);
			hr := F_VN_PutTextExp(sTextReference, ipImageIn, 50, 150, TCVN_FT_HERSHEY_SIMPLEX, 2.3, aColorBlue, 3, TCVN_LT_8_CONNECTED, FALSE, hr);
			hr := F_VN_DrawContours(ipContourReference, -1, ipImageIn, aColorBlue, 5, hr);

		Index:=0;
		
		hr:= F_VN_DrawContours(ipContoursFiltered, -1, ipImageIn, aColorRed, 2, hr);
		//		hr := F_VN_DrawContours(ipContours, -1, ipImageIn, aColorGreen, 1, hr);
			
//		
//				hr :=	F_VN_MatchContours(ipContour ,ipReference_Triangle, TCVN_CMCM_CONTOURS_MATCH_I1, fDissimilarity, hr);

					
//				END_IF
//			ELSE
//				sContourNumberText:= 'Red';		
//			END_IF
//			hr:= F_VN_ContourCenterOfMass(ipContour, aCenter, hr);
//			hr1:= F_VN_PutText(sContourNumberText, ipImageResult, LREAL_TO_UDINT(aCenter[0])+100,LREAL_TO_UDINT(aCenter[1]), ETcVnFontType.TCVN_FT_HERSHEY_PLAIN, 2, aColor_red, hr);
				
		
		



			
			nCounter := nCounter + 1;
		
		ELSE
			
//			fBestDissimilarity := 10E300;
			
//			// Iterate through all found contours

//			WHILE hr = S_OK AND_THEN ipIterator.CheckIfEnd() <> S_OK DO
//				hr := F_VN_GetContainer(ipIterator, ipContourCheck, hr);
//				hr := F_VN_IncrementIterator(ipIterator, hr);
				
//				// Match the current contour with the selected reference contour
//				hr := F_VN_MatchContours(ipContourReference, ipContourCheck, eComparisonMethod, fDissimilarity, hr);
				
//				// Save best result
//				IF fBestDissimilarity > fDissimilarity THEN
//					fBestDissimilarity := fDissimilarity;
//				END_IF
				
//				// Choose action depending on the dissimilarity of both contours
//				IF SUCCEEDED(hr) AND_THEN fDissimilarity < fMaxDissimilarity THEN
//					aColorRes := aColorGreen;
//				ELSE
//					aColorRes := aColorRed;
//				END_IF
				
//				// Draw matching results
//				sContourNumberText := REAL_TO_STRING(LREAL_TO_REAL(fDissimilarity));
//				hr := F_VN_UprightBoundingRectangle(ipContourCheck, stBoundingRectangle, hr);
//				hr := F_VN_DrawContours(ipContourCheck, -1, ipImageIn, aColorRes, 5, hr);
//				hr := F_VN_PutTextExp(sContourNumberText, ipImageIn, LREAL_TO_UDINT(stBoundingRectangle.nX + 30), LREAL_TO_UDINT(stBoundingRectangle.nY + (stBoundingRectangle.nHeight / 2)), TCVN_FT_HERSHEY_SIMPLEX, 0.8, aColorRes, 2, TCVN_LT_8_CONNECTED, FALSE, hr);

//			END_WHILE
			
//			// Draw text
//			hr := F_VN_PutTextExp(sTextCheck, ipImageIn, 50, 50, TCVN_FT_HERSHEY_SIMPLEX, 1.3, aColorGreen, 2, TCVN_LT_8_CONNECTED, FALSE, hr);
//			sContourNumberText := CONCAT('Best match: ', REAL_TO_STRING(LREAL_TO_REAL(fBestDissimilarity)));
//			hr := F_VN_PutTextExp(sContourNumberText, ipImageIn, 50, 100, TCVN_FT_HERSHEY_SIMPLEX, 1.3, aColorGreen, 2, TCVN_LT_8_CONNECTED, FALSE, hr);
			
		END_IF

		
		hr := F_VN_CopyIntoDisplayableImage(ipImageIn, ipImageInDisp, hr);



	
TCVN_CS_ERROR:
	hr := fbCamera.Reset();	

END_CASE


]]></ST>
    </Implementation>
    <LineIds Name="AdaptiveThreshold">
      <LineId Id="10" Count="20" />
      <LineId Id="393" Count="1" />
      <LineId Id="392" Count="0" />
      <LineId Id="361" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="365" Count="0" />
      <LineId Id="363" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="504" Count="8" />
      <LineId Id="503" Count="0" />
      <LineId Id="513" Count="0" />
      <LineId Id="395" Count="5" />
      <LineId Id="34" Count="0" />
      <LineId Id="514" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="515" Count="0" />
      <LineId Id="36" Count="10" />
      <LineId Id="389" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="336" Count="3" />
      <LineId Id="343" Count="1" />
      <LineId Id="374" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="371" Count="0" />
      <LineId Id="49" Count="7" />
      <LineId Id="58" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="372" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="366" Count="3" />
      <LineId Id="262" Count="0" />
      <LineId Id="357" Count="1" />
      <LineId Id="263" Count="0" />
      <LineId Id="65" Count="2" />
      <LineId Id="265" Count="0" />
      <LineId Id="375" Count="1" />
      <LineId Id="266" Count="0" />
      <LineId Id="68" Count="2" />
      <LineId Id="269" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="271" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="329" Count="0" />
      <LineId Id="326" Count="1" />
      <LineId Id="325" Count="0" />
      <LineId Id="328" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="318" Count="0" />
      <LineId Id="313" Count="0" />
      <LineId Id="319" Count="0" />
      <LineId Id="314" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="321" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="290" Count="1" />
      <LineId Id="310" Count="2" />
      <LineId Id="384" Count="2" />
      <LineId Id="388" Count="0" />
      <LineId Id="387" Count="0" />
      <LineId Id="381" Count="0" />
      <LineId Id="378" Count="2" />
      <LineId Id="308" Count="1" />
      <LineId Id="304" Count="2" />
      <LineId Id="334" Count="0" />
      <LineId Id="330" Count="0" />
      <LineId Id="307" Count="0" />
      <LineId Id="303" Count="0" />
      <LineId Id="302" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="296" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="82" Count="8" />
      <LineId Id="96" Count="3" />
      <LineId Id="104" Count="45" />
      <LineId Id="235" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="151" Count="7" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>